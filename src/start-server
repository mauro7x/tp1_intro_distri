#!/usr/bin/python3
"""
start-server description.
"""
from os import chdir, mkdir
from argparse import ArgumentParser
from lib.socket_tcp import Socket
from lib.accepter import Accepter
from lib.logger import logger, DEBUG_LEVEL, INFO_LEVEL, FATAL_LEVEL
from lib.statistics import statistics, print_statistics
from __main__ import __doc__ as description

DEFAULT_DIRPATH = "./files"


def parse_args():
    """
    Parse args using `argparse` in order to fullfil requirements.
    """

    parser = ArgumentParser(description=description)
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-v", "--verbose", action="store_const",
                       dest="level", const=DEBUG_LEVEL, default=INFO_LEVEL,
                       help="Increase output verbosity")
    group.add_argument("-q", "--quiet", action="store_const",
                       dest="level", const=FATAL_LEVEL,
                       help="Decrease output verbosity")
    parser.add_argument("-H", "--host", dest="ADDR", type=str,
                        default="localhost", help="service IP address")
    parser.add_argument("-p", "--port", dest="PORT", type=int,
                        default=4321, help="service port")
    parser.add_argument("-s", "--storage", dest="DIRPATH", type=str,
                        default=DEFAULT_DIRPATH, help="storage dir path")

    return parser.parse_args()


def main():
    """
    TODO: Description
    """

    args = parse_args()
    logger.setLevel(args.level)

    try:
        chdir(args.DIRPATH)
    except FileNotFoundError as e:
        if args.DIRPATH == DEFAULT_DIRPATH:
            mkdir(args.DIRPATH)
        else:
            logger.fatal(e.strerror + args.DIRPATH)
            exit(1)

    skt = Socket()
    logger.debug("Socket created.")

    skt.bind(args.ADDR, args.PORT)
    logger.debug(f"Socket bound to {args.ADDR}:{args.PORT}.")

    skt.listen()
    accepter = Accepter(skt)
    logger.info(f"Listening on port {args.PORT}.")

    try:
        while True:
            input()
    except EOFError:
        accepter.stop()

    print_statistics()


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.fatal(e)
